
@inherits LayoutComponentBase
@inject NavigationManager _navMan
@inject AuthenticationStateProvider _authenticationStateProvider

<MudThemeProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudThemeProvider/>

<MudLayout>
    <AuthorizeView>
        <NotAuthorized>
            <LoginComponent>

            </LoginComponent>
        </NotAuthorized>
        <Authorized>
            <MudAppBar Elevation="1">
                <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
                <MudSpacer/>
                <MudText Typo="Typo.h6" Class="px-4">@context.User.Identity.Name</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Login" OnClick="Logout" Color="Color.Inherit" Edge="Edge.End"/>
            </MudAppBar>
            <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
                <MudDrawerHeader>
                    <MudText Typo="Typo.h5" Class="mt-1">Search Party</MudText>
                </MudDrawerHeader>
                <NavMenu></NavMenu>
            </MudDrawer>
            <MudMainContent>
                @Body
            </MudMainContent>
        </Authorized>
    </AuthorizeView>
</MudLayout>
<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>


@code{
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task Logout()
    {
        var customAuthenticationStateProvider = (CustomAuthenticationStateProvider)_authenticationStateProvider;
        await customAuthenticationStateProvider.UpdateAuthenticationStateAsync(null!);
        _navMan.NavigateTo("/");
    }

    void GoToLogin()
    {
        _navMan.NavigateTo("login"); 
    }
}