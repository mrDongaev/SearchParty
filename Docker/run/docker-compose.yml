name: search_party

services:
  team_player_profiles_webapi:
    container_name: team_player_profiles_webapi
    depends_on:
      team_player_profiles_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy 
    build: 
      context: ../../
      dockerfile: TeamPlayerProfiles/build.Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
    ports: 
      - "8080:8080" 
      - "8081:8081" 
    environment:
      DATABASE_HOSTNAME: team_player_profiles_db
      DATABASE_PORT: 5432
      DATABASE_NAME: team_player_profiles
      DATABASE_USER: ${POSTGRES__USER}
      DATABASE_PASSWORD: ${POSTGRES__PASSWORD}
      AUTHENTICATION_SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
      USER_MESSAGING_URL: ${USER_MESSAGING_URL}
      TEAM_PLAYER_PROFILES__SEED_DATABASE: ${TEAM_PLAYER_PROFILES__SEED_DATABASE}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_LOGIN: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      PUBLIC_KEY: ${PUBLIC_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  team_player_profiles_db:
    container_name: team_player_profiles_db
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: team_player_profiles
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
    volumes: 
      - team_player_profiles_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__USER} -d team_player_profiles"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  user_info_webapi:
    container_name: user_info_webapi
    depends_on:
      user_info_db:
        condition: service_healthy
    build: 
      context: ../../
      dockerfile: UserInfo/build.Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
    ports: 
      - "8082:8080" 
      - "8083:8081" 
    environment:
      DATABASE_HOSTNAME: user_info_db
      DATABASE_PORT: 5432
      DATABASE_NAME: user_info
      DATABASE_USER: ${POSTGRES__USER}
      DATABASE_PASSWORD: ${POSTGRES__PASSWORD}
      USER_INFO__SEED_DATABASE: ${USER_INFO__SEED_DATABASE}
      TEAM_PLAYER_PROFILES_URL: ${TEAM_PLAYER_PROFILES_URL}
      AUTHENTICATION_SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
      PUBLIC_KEY: ${PUBLIC_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  user_info_db:
    container_name: user_info_db
    image: postgres:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: user_info
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
    volumes: 
      - user_info_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__USER} -d user_info"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  user_auth_webapi:
    container_name: user_auth_webapi
    depends_on:
      user_info_db:
        condition: service_healthy
    build: 
      context: ../../
      dockerfile: Auth/build.Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
    ports: 
      - "8084:8080" 
      - "8085:8081" 
    environment:
      DATABASE_HOSTNAME: user_auth_db
      DATABASE_PORT: 5432
      DATABASE_NAME: user_auth
      DATABASE_USER: ${POSTGRES__USER}
      DATABASE_PASSWORD: ${POSTGRES__PASSWORD}
      USER_AUTH__SEED_DATABASE: ${USER_AUTH__SEED_DATABASE}
      USER_INFO_URL: ${USER_INFO_URL}
      PRIVATE_KEY: ${PRIVATE_KEY}
      PUBLIC_KEY: ${PUBLIC_KEY}
      REFRESH_KEY: ${REFRESH_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  user_auth_db:
    container_name: user_auth_db
    image: postgres:latest
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: user_auth
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
    volumes: 
      - user_auth_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__USER} -d user_auth"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  user_messaging_webapi:
    container_name: user_messaging_webapi
    depends_on:
      user_messaging_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy  
    build: 
      context: ../../
      dockerfile: UserMessaging/build.Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
    ports: 
      - "8086:8080" 
      - "8087:8081" 
    environment:
      DATABASE_HOSTNAME: user_messaging_db
      DATABASE_PORT: 5432
      DATABASE_NAME: user_messaging
      DATABASE_USER: ${POSTGRES__USER}
      DATABASE_PASSWORD: ${POSTGRES__PASSWORD}
      TEAM_PLAYER_PROFILES_URL: ${TEAM_PLAYER_PROFILES_URL}
      AUTHENTICATION_SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_VHOST: ${RABBITMQ_VHOST}
      RABBITMQ_LOGIN: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_DEFAULT_PASS}
      PUBLIC_KEY: ${PUBLIC_KEY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthcheck"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  user_messaging_db:
    container_name: user_messaging_db
    image: postgres:latest
    ports:
      - "5435:5432"
    environment:
      POSTGRES_DB: user_messaging
      POSTGRES_USER: ${POSTGRES__USER}
      POSTGRES_PASSWORD: ${POSTGRES__PASSWORD}
    volumes: 
      - user_messaging_pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES__USER} -d user_messaging"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
#  search_party_front:
#    container_name: search_party_front
#    depends_on:
#      team_player_profiles_webapi:
#        condition: service_healthy
#      user_info_webapi:
#        condition: service_healthy
#      user_auth_webapi:
#        condition: service_healthy  
#      user_messaging_webapi:
#        condition: service_healthy
#    build: 
#      context: ../../
#      dockerfile: SearchPartyFront/SearchPartyWeb/Dockerfile
#      args:
#        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
#    ports: 
#      - "3000:8080" 
#      - "3030:8081"
#    environment:
#      TEAM_PLAYER_PROFILES_URL: ${TEAM_PLAYER_PROFILES_URL}
#      AUTHENTICATION_SERVICE_URL: ${AUTHENTICATION_SERVICE_URL}
#      USER_INFO_URL: ${USER_INFO_URL}
#      USER_MESSAGING_URL: ${AUTHENTICATION_SERVICE_URL}
  rabbitmq:
    container_name: search_party_message_bus
    build: 
      context: ../../
      dockerfile: Docker/rabbitmq/Dockerfile
    hostname: search_party_message_bus
    ports:
    - 15672:15672
    - 5672:5672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
    - search_party_message_bus_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics ping"]
      start_period: 30s
      interval: 10s
      timeout: 10s
      retries: 5  

volumes:
  team_player_profiles_pg_data:
    name: "team_player_profiles_pg_data"
    external: true
  user_info_pg_data:
    name: "user_info_pg_data"
    external: true
  user_auth_pg_data:
    name: "user_auth_pg_data"
    external: true
  user_messaging_pg_data:
    name: "user_messaging_pg_data"
    external: true
  search_party_message_bus_data:
    name: "search_party_message_bus_data"   
    external: true


